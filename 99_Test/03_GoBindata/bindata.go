package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func frontend_index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb2, 0x51,
		0x74, 0xf1, 0x77, 0x0e, 0x89, 0x0c, 0x70, 0x55, 0xc8, 0x28, 0xc9, 0xcd,
		0xb1, 0xe3, 0xb2, 0x81, 0x52, 0x49, 0xf9, 0x29, 0x95, 0x76, 0x5c, 0x40,
		0xae, 0xa1, 0x9d, 0x6f, 0xa5, 0x82, 0x5b, 0x66, 0x51, 0x71, 0x89, 0x82,
		0x47, 0x6a, 0x62, 0x4a, 0x66, 0x5e, 0xba, 0x8d, 0x3e, 0x50, 0x90, 0xcb,
		0xa6, 0x00, 0x24, 0x91, 0x06, 0x96, 0x28, 0x48, 0x2c, 0x4a, 0x4c, 0x2f,
		0x4a, 0x2c, 0xc8, 0xd0, 0xb3, 0xd1, 0x2f, 0x00, 0xe9, 0xd2, 0x87, 0x68,
		0x07, 0xaa, 0x04, 0x99, 0xa6, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0x2e,
		0xcc, 0x9b, 0x92, 0x65, 0x00, 0x00, 0x00,
		},
		"frontend/index.html",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"frontend/index.html": frontend_index_html,

}
